// Generated by gencpp from file cooking_manager/RecipeStep.msg
// DO NOT EDIT!


#ifndef COOKING_MANAGER_MESSAGE_RECIPESTEP_H
#define COOKING_MANAGER_MESSAGE_RECIPESTEP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cooking_manager
{
template <class ContainerAllocator>
struct RecipeStep_
{
  typedef RecipeStep_<ContainerAllocator> Type;

  RecipeStep_()
    : step()  {
    }
  RecipeStep_(const ContainerAllocator& _alloc)
    : step(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _step_type;
  _step_type step;





  typedef boost::shared_ptr< ::cooking_manager::RecipeStep_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cooking_manager::RecipeStep_<ContainerAllocator> const> ConstPtr;

}; // struct RecipeStep_

typedef ::cooking_manager::RecipeStep_<std::allocator<void> > RecipeStep;

typedef boost::shared_ptr< ::cooking_manager::RecipeStep > RecipeStepPtr;
typedef boost::shared_ptr< ::cooking_manager::RecipeStep const> RecipeStepConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cooking_manager::RecipeStep_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cooking_manager::RecipeStep_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cooking_manager::RecipeStep_<ContainerAllocator1> & lhs, const ::cooking_manager::RecipeStep_<ContainerAllocator2> & rhs)
{
  return lhs.step == rhs.step;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cooking_manager::RecipeStep_<ContainerAllocator1> & lhs, const ::cooking_manager::RecipeStep_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cooking_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cooking_manager::RecipeStep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cooking_manager::RecipeStep_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cooking_manager::RecipeStep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cooking_manager::RecipeStep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cooking_manager::RecipeStep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cooking_manager::RecipeStep_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cooking_manager::RecipeStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2ee9423a5e4755eeacf5800eb738c64";
  }

  static const char* value(const ::cooking_manager::RecipeStep_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2ee9423a5e4755eULL;
  static const uint64_t static_value2 = 0xeacf5800eb738c64ULL;
};

template<class ContainerAllocator>
struct DataType< ::cooking_manager::RecipeStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cooking_manager/RecipeStep";
  }

  static const char* value(const ::cooking_manager::RecipeStep_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cooking_manager::RecipeStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string step\n"
;
  }

  static const char* value(const ::cooking_manager::RecipeStep_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cooking_manager::RecipeStep_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.step);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecipeStep_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cooking_manager::RecipeStep_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cooking_manager::RecipeStep_<ContainerAllocator>& v)
  {
    s << indent << "step: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.step);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COOKING_MANAGER_MESSAGE_RECIPESTEP_H
